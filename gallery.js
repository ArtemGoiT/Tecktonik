const images = [
  {
    preview:
      'https://cdn.pixabay.com/photo/2019/05/14/16/43/rchids-4202820__480.jpg',
    original:
      'https://cdn.pixabay.com/photo/2019/05/14/16/43/rchids-4202820_1280.jpg',
    description: 'Hokkaido Flower',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2019/05/14/22/05/container-4203677__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2019/05/14/22/05/container-4203677_1280.jpg',
    description: 'Container Haulage Freight',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2019/05/16/09/47/beach-4206785__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2019/05/16/09/47/beach-4206785_1280.jpg',
    description: 'Aerial Beach View',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2016/11/18/16/19/flowers-1835619__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2016/11/18/16/19/flowers-1835619_1280.jpg',
    description: 'Flower Blooms',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2018/09/13/10/36/mountains-3674334__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2018/09/13/10/36/mountains-3674334_1280.jpg',
    description: 'Alpine Mountains',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2019/05/16/23/04/landscape-4208571__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2019/05/16/23/04/landscape-4208571_1280.jpg',
    description: 'Mountain Lake Sailing',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2019/05/17/09/27/the-alps-4209272__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2019/05/17/09/27/the-alps-4209272_1280.jpg',
    description: 'Alpine Spring Meadows',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2019/05/16/21/10/landscape-4208255__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2019/05/16/21/10/landscape-4208255_1280.jpg',
    description: 'Nature Landscape',
  },
  {
    preview:
      'https://cdn.pixabay.com/photo/2019/05/17/04/35/lighthouse-4208843__340.jpg',
    original:
      'https://cdn.pixabay.com/photo/2019/05/17/04/35/lighthouse-4208843_1280.jpg',
    description: 'Lighthouse Coast Sea',
  },
];

const gellery = document.querySelector('.gellery');
//* Этот фрагмент кода на JavaScript выбирает первый элемент в документе с классом "gallery"
// ! с помощью метода querySelector и сохраняет его в переменную gallery.
//*  Таким образом, gallery будет ссылаться на DOM - элемент с классом "gallery".
//*  Это может использоваться, например, для работы с этим элементом,
//* изменения его содержимого, стилей или привязки к нему обработчиков событий
function imageGellery() {
  //! Функция imageGallery() - это JavaScript функция, которая, вероятно, предназначена для работы с галереей изображений.
  //* Эта функция может выполнять различные задачи, связанные с управлением галереей изображений,
  //*  такие как открытие изображений в модальном окне, переключение между изображениями,
  //*    загрузка изображений и так далее.
  //* Вы можете назвать функцию как хотите.Важно выбирать имя,
  //* которое отражает её предназначение и делает код более понятным для других разработчиков(и себя в будущем).
  const image = images
    //! Эта строка создаёт константу image и присваивает ей значение переменной images.
    //* В JavaScript, такая конструкция не создаёт новую копию значения,
    //*   а лишь создаёт другое имя(в данном случае image) для того же самого значения,
    //*   которое уже имеется в переменной images.Это означает, что если изменить значение image,
    //*     то это отразится и на переменной images, и наоборот.
    .map(({ preview, original, description }) =>
      //!   Эта строка использует метод массива.map(), чтобы применить функцию к каждому элементу массива объектов.
      //* Деструктуризация объекта позволяет извлечь свойства preview, original,
      //*   и description для дальнейшей работы с ними внутри функции обратного вызова
      {
        return `<li class="gellery-item">  
     <a class="class=gellery-item" href= "${original}"> 
    
     <img class="gellery-image" 
     src="${preview}" 
     data-sourse="${original}" 
     alt="${description}" 
     />
     </a>
     </li>;`;
      }
    )
    .join('\n');
  //*   Строка.join("\n") используется для объединения элементов массива в одну строку с использованием определенного разделителя,
  //*     который в данном случае является символ новой строки \n.
  //* В вашем коде она используется после метода .map() для объединения всех элементов массива строк в одну большую строку, где каждый элемент массива будет разделен символом новой строки.
  //* Это часто применяется для форматирования текста,
  //* чтобы сделать его более читабельным, когда вы планируете вставить эту строку в HTML - код или в другие многострочные текстовые поля.
  gellery.innerHTML = image;
  //? */   Когда вы устанавливаете свойство innerHTML элемента, вы перезаписываете его содержимое новой HTML-разметкой, которая предоставляется строкой.
  //? */ В вашем коде, gallery.innerHTML = imageList; означает, что содержимое элемента с классом "gallery"
  //? */ будет заменено на HTML - разметку, которая была сгенерирована и сохранена в переменной imageList.
  //? */ Это особенно полезно, когда у вас есть элемент на странице, в который вы хотите вставить или заменить HTML-контент.
  gellery.addEventListener('click', handleImageClick);
}
//* Этот обработчик событий используется, чтобы реагировать на клики на изображениях в галерее.Как только происходит клик, функция handleImageClick будет вызвана,
//*   и она выполнит какую - то логику, связанную с отображением увеличенной версии изображения или другие действия, определенные внутри этой функции

//Todo Этот код выбирает элемент с классом "gellery" из DOM - дерева и создает галерею изображений на основе данных из массива images.Каждое изображение отображается в списке как элемент < li >
//Todo   с соответствующими свойствами.При клике на изображение запускается функция handleImageClick, которая открывает увеличенное изображение в модальном окне.
function handleImageClick(e) {
  //* "e" (или "event") представляет объект события, который содержит информацию о событии клика.
  //* В данном контексте, "e" содержит информацию о клике на изображении в галерее.
  //* Вы можете использовать "e" для получения информации о кликнутом изображении,
  //* например, используя свойства "e.target" для доступа к элементу, на котором произошел клик.
  //* Здесь вы можете реализовать логику обработки клика на изображении,
  //* такую как открытие модального окна с увеличенной версией изображения,
  //* вывод дополнительной информации об изображении и так далее.

  const targetImage = e.target;
  if (targetImage.classList.contains('gallery-image')) {
    // *  В данном контексте targetImage представляет собой элемент, на котором произошло событие клика.
    //* Метод classList.contains("gallery-image") возвращает true, если у этого элемента есть класс "gallery-image", и false в противном случае.
    e.preventDefault();
    //* В контексте галереи изображений, вызов e.preventDefault() обычно используется для предотвращения перехода по ссылке при клике на изображение внутри <a> элемента.
    //* Это позволяет реализовать кастомное поведение, например, открытие увеличенной версии изображения в модальном окне, без перехода на другую страницу.
    const largeImageSource = targetImage.dataset.source;
    //* Получаем значение атрибута 'data-source' из элемента 'targetImage'
    const imageALT = targetImage.getAttribute('alt');
    //*  Получаем значение атрибута 'alt' из элемента 'targetImage'.
    //*    Атрибут 'alt' обычно используется для предоставления текстового описания изображения.
    const instance = basicLightbox.create(
      `<img src="${largeImageSource}" alt= Large image: ${imageAlt}"/>`,
      //* Эта строка создаёт новый экземпляр модального окна с изображением с использованием библиотеки Lightbox.
      // * В результате создаётся модальное окно с изображением, внутри которого будет размещён HTML-элемент <img>.
      // *Атрибуты src и alt этого элемента будут установлены в значения переменных ${ largeImageSource } и ${ imageAlt } соответственно.
      {
        onShow: () => {
          document.addEventListener('keydown', hadleKeyPress);
        },
        //* Этот код добавляет обработчик событий при отображении модального окна.
        //* Когда модальное окно становится видимым, функция onShow срабатывает и добавляет слушатель события keydown.
        //* Это означает, что когда пользователь нажимает клавишу на клавиатуре, функция hadleKeyPress вызывается для обработки этого события.
        onClose: () => {
          document.removeEventListener('keydown', hadleKeyPress);
        },
        // ?document.removeEventListener("keydown", hadleKeyPress) - это вызов метода removeEventListener, который удаляет ранее установленный обработчик событий hadleKeyPress для события keydown с объекта document.
        //? Таким образом, после закрытия модального окна, функция hadleKeyPress не будет вызываться при нажатии клавиши на клавиатуре.
      }
    );
    instance.show();
    //* Эта строка кода вызывает метод show() для модального окна, созданного с помощью Lightbox. Метод show() используется для отображения модального окна на экране.
    // *В контексте использования библиотеки Lightbox, вызов instance.show() означает, что модальное окно, созданное предыдущим вызовом basicLightbox.create(), будет показано пользователю.
  }
}
function hadleKeyPress(event) {
  if (event.key === 'Escape') {
    instance.close();
    //* Код, который вы предоставили, является функцией обработки нажатия клавиши.
    //* Эта функция проверяет, была ли нажата клавиша "Escape"(Esc).Если это так, то вызывается метод close() для закрытия модального окна.
  }
}
imageGellery();
